// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `IServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IServer_h__
#define __IServer_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace server
{

class IServer;
class IServerPrx;

}

namespace server
{

struct Music
{
    int id;
    ::std::string name;
    ::std::string artist;
    ::std::string album;
    ::std::string path;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const int&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(id, name, artist, album, path);
    }
};

using playlist = ::std::vector<Music>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace server
{

class IServer : public virtual ::Ice::Object
{
public:

    using ProxyType = IServerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void addMusic(::std::string name, ::std::string artist, ::std::string album, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_addMusic(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool addMusicPath(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_addMusicPath(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void playMusic(int id, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_playMusic(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool stopMusic(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_stopMusic(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool remove(int id, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_remove(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Music findById(int id, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_findById(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual playlist findByName(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_findByName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual playlist findByArtist(::std::string artist, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_findByArtist(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual playlist findByAlbum(::std::string album, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_findByAlbum(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void display(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_display(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual playlist getPlaylist(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPlaylist(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace server
{

class IServerPrx : public virtual ::Ice::Proxy<IServerPrx, ::Ice::ObjectPrx>
{
public:

    void addMusic(const ::std::string& name, const ::std::string& artist, const ::std::string& album, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IServerPrx::_iceI_addMusic, name, artist, album, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto addMusicAsync(const ::std::string& name, const ::std::string& artist, const ::std::string& album, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IServerPrx::_iceI_addMusic, name, artist, album, context);
    }

    ::std::function<void()>
    addMusicAsync(const ::std::string& name, const ::std::string& artist, const ::std::string& album,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &IServerPrx::_iceI_addMusic, name, artist, album, context);
    }

    /// \cond INTERNAL
    void _iceI_addMusic(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    bool addMusicPath(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &IServerPrx::_iceI_addMusicPath, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto addMusicPathAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &IServerPrx::_iceI_addMusicPath, name, context);
    }

    ::std::function<void()>
    addMusicPathAsync(const ::std::string& name,
                      ::std::function<void(bool)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &IServerPrx::_iceI_addMusicPath, name, context);
    }

    /// \cond INTERNAL
    void _iceI_addMusicPath(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void playMusic(int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IServerPrx::_iceI_playMusic, id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto playMusicAsync(int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IServerPrx::_iceI_playMusic, id, context);
    }

    ::std::function<void()>
    playMusicAsync(int id,
                   ::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &IServerPrx::_iceI_playMusic, id, context);
    }

    /// \cond INTERNAL
    void _iceI_playMusic(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::Ice::Context&);
    /// \endcond

    bool stopMusic(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &IServerPrx::_iceI_stopMusic, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto stopMusicAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &IServerPrx::_iceI_stopMusic, context);
    }

    ::std::function<void()>
    stopMusicAsync(::std::function<void(bool)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &IServerPrx::_iceI_stopMusic, context);
    }

    /// \cond INTERNAL
    void _iceI_stopMusic(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    bool remove(int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &IServerPrx::_iceI_remove, id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto removeAsync(int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &IServerPrx::_iceI_remove, id, context);
    }

    ::std::function<void()>
    removeAsync(int id,
                ::std::function<void(bool)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &IServerPrx::_iceI_remove, id, context);
    }

    /// \cond INTERNAL
    void _iceI_remove(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, int, const ::Ice::Context&);
    /// \endcond

    Music findById(int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<Music>(true, this, &IServerPrx::_iceI_findById, id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto findByIdAsync(int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Music>>().get_future())
    {
        return _makePromiseOutgoing<Music, P>(false, this, &IServerPrx::_iceI_findById, id, context);
    }

    ::std::function<void()>
    findByIdAsync(int id,
                  ::std::function<void(Music)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<Music>(response, ex, sent, this, &IServerPrx::_iceI_findById, id, context);
    }

    /// \cond INTERNAL
    void _iceI_findById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Music>>&, int, const ::Ice::Context&);
    /// \endcond

    playlist findByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<playlist>(true, this, &IServerPrx::_iceI_findByName, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto findByNameAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<playlist>>().get_future())
    {
        return _makePromiseOutgoing<playlist, P>(false, this, &IServerPrx::_iceI_findByName, name, context);
    }

    ::std::function<void()>
    findByNameAsync(const ::std::string& name,
                    ::std::function<void(playlist)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<playlist>(response, ex, sent, this, &IServerPrx::_iceI_findByName, name, context);
    }

    /// \cond INTERNAL
    void _iceI_findByName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<playlist>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    playlist findByArtist(const ::std::string& artist, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<playlist>(true, this, &IServerPrx::_iceI_findByArtist, artist, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto findByArtistAsync(const ::std::string& artist, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<playlist>>().get_future())
    {
        return _makePromiseOutgoing<playlist, P>(false, this, &IServerPrx::_iceI_findByArtist, artist, context);
    }

    ::std::function<void()>
    findByArtistAsync(const ::std::string& artist,
                      ::std::function<void(playlist)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<playlist>(response, ex, sent, this, &IServerPrx::_iceI_findByArtist, artist, context);
    }

    /// \cond INTERNAL
    void _iceI_findByArtist(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<playlist>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    playlist findByAlbum(const ::std::string& album, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<playlist>(true, this, &IServerPrx::_iceI_findByAlbum, album, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto findByAlbumAsync(const ::std::string& album, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<playlist>>().get_future())
    {
        return _makePromiseOutgoing<playlist, P>(false, this, &IServerPrx::_iceI_findByAlbum, album, context);
    }

    ::std::function<void()>
    findByAlbumAsync(const ::std::string& album,
                     ::std::function<void(playlist)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<playlist>(response, ex, sent, this, &IServerPrx::_iceI_findByAlbum, album, context);
    }

    /// \cond INTERNAL
    void _iceI_findByAlbum(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<playlist>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void display(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IServerPrx::_iceI_display, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto displayAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IServerPrx::_iceI_display, context);
    }

    ::std::function<void()>
    displayAsync(::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &IServerPrx::_iceI_display, context);
    }

    /// \cond INTERNAL
    void _iceI_display(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    playlist getPlaylist(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<playlist>(true, this, &IServerPrx::_iceI_getPlaylist, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPlaylistAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<playlist>>().get_future())
    {
        return _makePromiseOutgoing<playlist, P>(false, this, &IServerPrx::_iceI_getPlaylist, context);
    }

    ::std::function<void()>
    getPlaylistAsync(::std::function<void(playlist)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<playlist>(response, ex, sent, this, &IServerPrx::_iceI_getPlaylist, context);
    }

    /// \cond INTERNAL
    void _iceI_getPlaylist(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<playlist>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    IServerPrx() = default;
    friend ::std::shared_ptr<IServerPrx> IceInternal::createProxy<IServerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::server::Music>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::server::Music, S>
{
    static void read(S* istr, ::server::Music& v)
    {
        istr->readAll(v.id, v.name, v.artist, v.album, v.path);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace server
{

using IServerPtr = ::std::shared_ptr<IServer>;
using IServerPrxPtr = ::std::shared_ptr<IServerPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace server
{

class IServer;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::server::IServer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::server::IServer*);
/// \endcond

}

}

namespace server
{

class IServer;
/// \cond INTERNAL
::Ice::Object* upCast(IServer*);
/// \endcond
typedef ::IceInternal::Handle< IServer> IServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::server::IServer> IServerPrx;
typedef IServerPrx IServerPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(IServerPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace server
{

struct Music
{
    ::Ice::Int id;
    ::std::string name;
    ::std::string artist;
    ::std::string album;
    ::std::string path;

    bool operator==(const Music& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(name != rhs_.name)
        {
            return false;
        }
        if(artist != rhs_.artist)
        {
            return false;
        }
        if(album != rhs_.album)
        {
            return false;
        }
        if(path != rhs_.path)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Music& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(name < rhs_.name)
        {
            return true;
        }
        else if(rhs_.name < name)
        {
            return false;
        }
        if(artist < rhs_.artist)
        {
            return true;
        }
        else if(rhs_.artist < artist)
        {
            return false;
        }
        if(album < rhs_.album)
        {
            return true;
        }
        else if(rhs_.album < album)
        {
            return false;
        }
        if(path < rhs_.path)
        {
            return true;
        }
        else if(rhs_.path < path)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Music& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Music& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Music& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Music& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<server::Music> playlist;

}

namespace server
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IServer::begin_addMusic.
 * Create a wrapper instance by calling ::server::newCallback_IServer_addMusic.
 */
class Callback_IServer_addMusic_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IServer_addMusic_Base> Callback_IServer_addMusicPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IServer::begin_addMusicPath.
 * Create a wrapper instance by calling ::server::newCallback_IServer_addMusicPath.
 */
class Callback_IServer_addMusicPath_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IServer_addMusicPath_Base> Callback_IServer_addMusicPathPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IServer::begin_playMusic.
 * Create a wrapper instance by calling ::server::newCallback_IServer_playMusic.
 */
class Callback_IServer_playMusic_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IServer_playMusic_Base> Callback_IServer_playMusicPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IServer::begin_stopMusic.
 * Create a wrapper instance by calling ::server::newCallback_IServer_stopMusic.
 */
class Callback_IServer_stopMusic_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IServer_stopMusic_Base> Callback_IServer_stopMusicPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IServer::begin_remove.
 * Create a wrapper instance by calling ::server::newCallback_IServer_remove.
 */
class Callback_IServer_remove_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IServer_remove_Base> Callback_IServer_removePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IServer::begin_findById.
 * Create a wrapper instance by calling ::server::newCallback_IServer_findById.
 */
class Callback_IServer_findById_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IServer_findById_Base> Callback_IServer_findByIdPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IServer::begin_findByName.
 * Create a wrapper instance by calling ::server::newCallback_IServer_findByName.
 */
class Callback_IServer_findByName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IServer_findByName_Base> Callback_IServer_findByNamePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IServer::begin_findByArtist.
 * Create a wrapper instance by calling ::server::newCallback_IServer_findByArtist.
 */
class Callback_IServer_findByArtist_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IServer_findByArtist_Base> Callback_IServer_findByArtistPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IServer::begin_findByAlbum.
 * Create a wrapper instance by calling ::server::newCallback_IServer_findByAlbum.
 */
class Callback_IServer_findByAlbum_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IServer_findByAlbum_Base> Callback_IServer_findByAlbumPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IServer::begin_display.
 * Create a wrapper instance by calling ::server::newCallback_IServer_display.
 */
class Callback_IServer_display_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IServer_display_Base> Callback_IServer_displayPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IServer::begin_getPlaylist.
 * Create a wrapper instance by calling ::server::newCallback_IServer_getPlaylist.
 */
class Callback_IServer_getPlaylist_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IServer_getPlaylist_Base> Callback_IServer_getPlaylistPtr;

}

namespace IceProxy
{

namespace server
{

class IServer : public virtual ::Ice::Proxy<IServer, ::IceProxy::Ice::Object>
{
public:

    void addMusic(const ::std::string& name, const ::std::string& artist, const ::std::string& album, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_addMusic(_iceI_begin_addMusic(name, artist, album, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_addMusic(const ::std::string& name, const ::std::string& artist, const ::std::string& album, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_addMusic(name, artist, album, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addMusic(const ::std::string& name, const ::std::string& artist, const ::std::string& album, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addMusic(name, artist, album, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addMusic(const ::std::string& name, const ::std::string& artist, const ::std::string& album, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addMusic(name, artist, album, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addMusic(const ::std::string& name, const ::std::string& artist, const ::std::string& album, const ::server::Callback_IServer_addMusicPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addMusic(name, artist, album, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addMusic(const ::std::string& name, const ::std::string& artist, const ::std::string& album, const ::Ice::Context& context, const ::server::Callback_IServer_addMusicPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addMusic(name, artist, album, context, cb, cookie);
    }

    void end_addMusic(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_addMusic(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool addMusicPath(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_addMusicPath(_iceI_begin_addMusicPath(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_addMusicPath(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_addMusicPath(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addMusicPath(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addMusicPath(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addMusicPath(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addMusicPath(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addMusicPath(const ::std::string& name, const ::server::Callback_IServer_addMusicPathPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addMusicPath(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addMusicPath(const ::std::string& name, const ::Ice::Context& context, const ::server::Callback_IServer_addMusicPathPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addMusicPath(name, context, cb, cookie);
    }

    bool end_addMusicPath(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_addMusicPath(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void playMusic(::Ice::Int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_playMusic(_iceI_begin_playMusic(id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_playMusic(::Ice::Int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_playMusic(id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_playMusic(::Ice::Int id, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_playMusic(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_playMusic(::Ice::Int id, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_playMusic(id, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_playMusic(::Ice::Int id, const ::server::Callback_IServer_playMusicPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_playMusic(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_playMusic(::Ice::Int id, const ::Ice::Context& context, const ::server::Callback_IServer_playMusicPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_playMusic(id, context, cb, cookie);
    }

    void end_playMusic(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_playMusic(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool stopMusic(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_stopMusic(_iceI_begin_stopMusic(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_stopMusic(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_stopMusic(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopMusic(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopMusic(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopMusic(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopMusic(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopMusic(const ::server::Callback_IServer_stopMusicPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopMusic(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopMusic(const ::Ice::Context& context, const ::server::Callback_IServer_stopMusicPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopMusic(context, cb, cookie);
    }

    bool end_stopMusic(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_stopMusic(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool remove(::Ice::Int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_remove(_iceI_begin_remove(id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_remove(::Ice::Int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_remove(id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_remove(::Ice::Int id, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_remove(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_remove(::Ice::Int id, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_remove(id, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_remove(::Ice::Int id, const ::server::Callback_IServer_removePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_remove(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_remove(::Ice::Int id, const ::Ice::Context& context, const ::server::Callback_IServer_removePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_remove(id, context, cb, cookie);
    }

    bool end_remove(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_remove(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::server::Music findById(::Ice::Int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_findById(_iceI_begin_findById(id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_findById(::Ice::Int id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_findById(id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findById(::Ice::Int id, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findById(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findById(::Ice::Int id, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findById(id, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findById(::Ice::Int id, const ::server::Callback_IServer_findByIdPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findById(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findById(::Ice::Int id, const ::Ice::Context& context, const ::server::Callback_IServer_findByIdPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findById(id, context, cb, cookie);
    }

    ::server::Music end_findById(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_findById(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::server::playlist findByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_findByName(_iceI_begin_findByName(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_findByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_findByName(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findByName(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findByName(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findByName(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findByName(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findByName(const ::std::string& name, const ::server::Callback_IServer_findByNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findByName(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findByName(const ::std::string& name, const ::Ice::Context& context, const ::server::Callback_IServer_findByNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findByName(name, context, cb, cookie);
    }

    ::server::playlist end_findByName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_findByName(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::server::playlist findByArtist(const ::std::string& artist, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_findByArtist(_iceI_begin_findByArtist(artist, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_findByArtist(const ::std::string& artist, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_findByArtist(artist, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findByArtist(const ::std::string& artist, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findByArtist(artist, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findByArtist(const ::std::string& artist, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findByArtist(artist, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findByArtist(const ::std::string& artist, const ::server::Callback_IServer_findByArtistPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findByArtist(artist, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findByArtist(const ::std::string& artist, const ::Ice::Context& context, const ::server::Callback_IServer_findByArtistPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findByArtist(artist, context, cb, cookie);
    }

    ::server::playlist end_findByArtist(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_findByArtist(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::server::playlist findByAlbum(const ::std::string& album, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_findByAlbum(_iceI_begin_findByAlbum(album, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_findByAlbum(const ::std::string& album, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_findByAlbum(album, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findByAlbum(const ::std::string& album, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findByAlbum(album, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findByAlbum(const ::std::string& album, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findByAlbum(album, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findByAlbum(const ::std::string& album, const ::server::Callback_IServer_findByAlbumPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findByAlbum(album, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_findByAlbum(const ::std::string& album, const ::Ice::Context& context, const ::server::Callback_IServer_findByAlbumPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findByAlbum(album, context, cb, cookie);
    }

    ::server::playlist end_findByAlbum(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_findByAlbum(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void display(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_display(_iceI_begin_display(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_display(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_display(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_display(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_display(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_display(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_display(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_display(const ::server::Callback_IServer_displayPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_display(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_display(const ::Ice::Context& context, const ::server::Callback_IServer_displayPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_display(context, cb, cookie);
    }

    void end_display(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_display(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::server::playlist getPlaylist(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPlaylist(_iceI_begin_getPlaylist(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPlaylist(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPlaylist(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPlaylist(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPlaylist(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlaylist(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPlaylist(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlaylist(const ::server::Callback_IServer_getPlaylistPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPlaylist(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlaylist(const ::Ice::Context& context, const ::server::Callback_IServer_getPlaylistPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPlaylist(context, cb, cookie);
    }

    ::server::playlist end_getPlaylist(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPlaylist(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace server
{

class IServer : public virtual ::Ice::Object
{
public:

    typedef IServerPrx ProxyType;
    typedef IServerPtr PointerType;

    virtual ~IServer();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void addMusic(const ::std::string& name, const ::std::string& artist, const ::std::string& album, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_addMusic(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool addMusicPath(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_addMusicPath(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void playMusic(::Ice::Int id, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_playMusic(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool stopMusic(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_stopMusic(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool remove(::Ice::Int id, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_remove(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Music findById(::Ice::Int id, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_findById(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual playlist findByName(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_findByName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual playlist findByArtist(const ::std::string& artist, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_findByArtist(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual playlist findByAlbum(const ::std::string& album, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_findByAlbum(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void display(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_display(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual playlist getPlaylist(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPlaylist(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const IServer& lhs, const IServer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const IServer& lhs, const IServer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::server::Music>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::server::Music, S>
{
    static void write(S* ostr, const ::server::Music& v)
    {
        ostr->write(v.id);
        ostr->write(v.name);
        ostr->write(v.artist);
        ostr->write(v.album);
        ostr->write(v.path);
    }
};

template<typename S>
struct StreamReader< ::server::Music, S>
{
    static void read(S* istr, ::server::Music& v)
    {
        istr->read(v.id);
        istr->read(v.name);
        istr->read(v.artist);
        istr->read(v.album);
        istr->read(v.path);
    }
};

}
/// \endcond

namespace server
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IServer::begin_addMusic.
 * Create a wrapper instance by calling ::server::newCallback_IServer_addMusic.
 */
template<class T>
class CallbackNC_IServer_addMusic : public Callback_IServer_addMusic_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IServer_addMusic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_addMusic.
 */
template<class T> Callback_IServer_addMusicPtr
newCallback_IServer_addMusic(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_addMusic<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_addMusic.
 */
template<class T> Callback_IServer_addMusicPtr
newCallback_IServer_addMusic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_addMusic<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_addMusic.
 */
template<class T> Callback_IServer_addMusicPtr
newCallback_IServer_addMusic(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_addMusic<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_addMusic.
 */
template<class T> Callback_IServer_addMusicPtr
newCallback_IServer_addMusic(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_addMusic<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IServer::begin_addMusic.
 * Create a wrapper instance by calling ::server::newCallback_IServer_addMusic.
 */
template<class T, typename CT>
class Callback_IServer_addMusic : public Callback_IServer_addMusic_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IServer_addMusic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_addMusic.
 */
template<class T, typename CT> Callback_IServer_addMusicPtr
newCallback_IServer_addMusic(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_addMusic<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_addMusic.
 */
template<class T, typename CT> Callback_IServer_addMusicPtr
newCallback_IServer_addMusic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_addMusic<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_addMusic.
 */
template<class T, typename CT> Callback_IServer_addMusicPtr
newCallback_IServer_addMusic(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_addMusic<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_addMusic.
 */
template<class T, typename CT> Callback_IServer_addMusicPtr
newCallback_IServer_addMusic(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_addMusic<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IServer::begin_addMusicPath.
 * Create a wrapper instance by calling ::server::newCallback_IServer_addMusicPath.
 */
template<class T>
class CallbackNC_IServer_addMusicPath : public Callback_IServer_addMusicPath_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_IServer_addMusicPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_addMusicPath(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_addMusicPath.
 */
template<class T> Callback_IServer_addMusicPathPtr
newCallback_IServer_addMusicPath(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_addMusicPath<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_addMusicPath.
 */
template<class T> Callback_IServer_addMusicPathPtr
newCallback_IServer_addMusicPath(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_addMusicPath<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IServer::begin_addMusicPath.
 * Create a wrapper instance by calling ::server::newCallback_IServer_addMusicPath.
 */
template<class T, typename CT>
class Callback_IServer_addMusicPath : public Callback_IServer_addMusicPath_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_IServer_addMusicPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_addMusicPath(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_addMusicPath.
 */
template<class T, typename CT> Callback_IServer_addMusicPathPtr
newCallback_IServer_addMusicPath(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_addMusicPath<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_addMusicPath.
 */
template<class T, typename CT> Callback_IServer_addMusicPathPtr
newCallback_IServer_addMusicPath(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_addMusicPath<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IServer::begin_playMusic.
 * Create a wrapper instance by calling ::server::newCallback_IServer_playMusic.
 */
template<class T>
class CallbackNC_IServer_playMusic : public Callback_IServer_playMusic_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IServer_playMusic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_playMusic.
 */
template<class T> Callback_IServer_playMusicPtr
newCallback_IServer_playMusic(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_playMusic<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_playMusic.
 */
template<class T> Callback_IServer_playMusicPtr
newCallback_IServer_playMusic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_playMusic<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_playMusic.
 */
template<class T> Callback_IServer_playMusicPtr
newCallback_IServer_playMusic(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_playMusic<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_playMusic.
 */
template<class T> Callback_IServer_playMusicPtr
newCallback_IServer_playMusic(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_playMusic<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IServer::begin_playMusic.
 * Create a wrapper instance by calling ::server::newCallback_IServer_playMusic.
 */
template<class T, typename CT>
class Callback_IServer_playMusic : public Callback_IServer_playMusic_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IServer_playMusic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_playMusic.
 */
template<class T, typename CT> Callback_IServer_playMusicPtr
newCallback_IServer_playMusic(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_playMusic<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_playMusic.
 */
template<class T, typename CT> Callback_IServer_playMusicPtr
newCallback_IServer_playMusic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_playMusic<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_playMusic.
 */
template<class T, typename CT> Callback_IServer_playMusicPtr
newCallback_IServer_playMusic(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_playMusic<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_playMusic.
 */
template<class T, typename CT> Callback_IServer_playMusicPtr
newCallback_IServer_playMusic(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_playMusic<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IServer::begin_stopMusic.
 * Create a wrapper instance by calling ::server::newCallback_IServer_stopMusic.
 */
template<class T>
class CallbackNC_IServer_stopMusic : public Callback_IServer_stopMusic_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_IServer_stopMusic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_stopMusic(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_stopMusic.
 */
template<class T> Callback_IServer_stopMusicPtr
newCallback_IServer_stopMusic(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_stopMusic<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_stopMusic.
 */
template<class T> Callback_IServer_stopMusicPtr
newCallback_IServer_stopMusic(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_stopMusic<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IServer::begin_stopMusic.
 * Create a wrapper instance by calling ::server::newCallback_IServer_stopMusic.
 */
template<class T, typename CT>
class Callback_IServer_stopMusic : public Callback_IServer_stopMusic_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_IServer_stopMusic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_stopMusic(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_stopMusic.
 */
template<class T, typename CT> Callback_IServer_stopMusicPtr
newCallback_IServer_stopMusic(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_stopMusic<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_stopMusic.
 */
template<class T, typename CT> Callback_IServer_stopMusicPtr
newCallback_IServer_stopMusic(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_stopMusic<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IServer::begin_remove.
 * Create a wrapper instance by calling ::server::newCallback_IServer_remove.
 */
template<class T>
class CallbackNC_IServer_remove : public Callback_IServer_remove_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_IServer_remove(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_remove(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_remove.
 */
template<class T> Callback_IServer_removePtr
newCallback_IServer_remove(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_remove<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_remove.
 */
template<class T> Callback_IServer_removePtr
newCallback_IServer_remove(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_remove<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IServer::begin_remove.
 * Create a wrapper instance by calling ::server::newCallback_IServer_remove.
 */
template<class T, typename CT>
class Callback_IServer_remove : public Callback_IServer_remove_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_IServer_remove(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_remove(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_remove.
 */
template<class T, typename CT> Callback_IServer_removePtr
newCallback_IServer_remove(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_remove<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_remove.
 */
template<class T, typename CT> Callback_IServer_removePtr
newCallback_IServer_remove(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_remove<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IServer::begin_findById.
 * Create a wrapper instance by calling ::server::newCallback_IServer_findById.
 */
template<class T>
class CallbackNC_IServer_findById : public Callback_IServer_findById_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Music&);

    CallbackNC_IServer_findById(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        Music ret;
        try
        {
            ret = proxy->end_findById(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findById.
 */
template<class T> Callback_IServer_findByIdPtr
newCallback_IServer_findById(const IceUtil::Handle<T>& instance, void (T::*cb)(const Music&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_findById<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findById.
 */
template<class T> Callback_IServer_findByIdPtr
newCallback_IServer_findById(T* instance, void (T::*cb)(const Music&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_findById<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IServer::begin_findById.
 * Create a wrapper instance by calling ::server::newCallback_IServer_findById.
 */
template<class T, typename CT>
class Callback_IServer_findById : public Callback_IServer_findById_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Music&, const CT&);

    Callback_IServer_findById(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        Music ret;
        try
        {
            ret = proxy->end_findById(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findById.
 */
template<class T, typename CT> Callback_IServer_findByIdPtr
newCallback_IServer_findById(const IceUtil::Handle<T>& instance, void (T::*cb)(const Music&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_findById<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findById.
 */
template<class T, typename CT> Callback_IServer_findByIdPtr
newCallback_IServer_findById(T* instance, void (T::*cb)(const Music&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_findById<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IServer::begin_findByName.
 * Create a wrapper instance by calling ::server::newCallback_IServer_findByName.
 */
template<class T>
class CallbackNC_IServer_findByName : public Callback_IServer_findByName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const playlist&);

    CallbackNC_IServer_findByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        playlist ret;
        try
        {
            ret = proxy->end_findByName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findByName.
 */
template<class T> Callback_IServer_findByNamePtr
newCallback_IServer_findByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const playlist&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_findByName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findByName.
 */
template<class T> Callback_IServer_findByNamePtr
newCallback_IServer_findByName(T* instance, void (T::*cb)(const playlist&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_findByName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IServer::begin_findByName.
 * Create a wrapper instance by calling ::server::newCallback_IServer_findByName.
 */
template<class T, typename CT>
class Callback_IServer_findByName : public Callback_IServer_findByName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const playlist&, const CT&);

    Callback_IServer_findByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        playlist ret;
        try
        {
            ret = proxy->end_findByName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findByName.
 */
template<class T, typename CT> Callback_IServer_findByNamePtr
newCallback_IServer_findByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const playlist&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_findByName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findByName.
 */
template<class T, typename CT> Callback_IServer_findByNamePtr
newCallback_IServer_findByName(T* instance, void (T::*cb)(const playlist&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_findByName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IServer::begin_findByArtist.
 * Create a wrapper instance by calling ::server::newCallback_IServer_findByArtist.
 */
template<class T>
class CallbackNC_IServer_findByArtist : public Callback_IServer_findByArtist_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const playlist&);

    CallbackNC_IServer_findByArtist(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        playlist ret;
        try
        {
            ret = proxy->end_findByArtist(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findByArtist.
 */
template<class T> Callback_IServer_findByArtistPtr
newCallback_IServer_findByArtist(const IceUtil::Handle<T>& instance, void (T::*cb)(const playlist&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_findByArtist<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findByArtist.
 */
template<class T> Callback_IServer_findByArtistPtr
newCallback_IServer_findByArtist(T* instance, void (T::*cb)(const playlist&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_findByArtist<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IServer::begin_findByArtist.
 * Create a wrapper instance by calling ::server::newCallback_IServer_findByArtist.
 */
template<class T, typename CT>
class Callback_IServer_findByArtist : public Callback_IServer_findByArtist_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const playlist&, const CT&);

    Callback_IServer_findByArtist(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        playlist ret;
        try
        {
            ret = proxy->end_findByArtist(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findByArtist.
 */
template<class T, typename CT> Callback_IServer_findByArtistPtr
newCallback_IServer_findByArtist(const IceUtil::Handle<T>& instance, void (T::*cb)(const playlist&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_findByArtist<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findByArtist.
 */
template<class T, typename CT> Callback_IServer_findByArtistPtr
newCallback_IServer_findByArtist(T* instance, void (T::*cb)(const playlist&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_findByArtist<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IServer::begin_findByAlbum.
 * Create a wrapper instance by calling ::server::newCallback_IServer_findByAlbum.
 */
template<class T>
class CallbackNC_IServer_findByAlbum : public Callback_IServer_findByAlbum_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const playlist&);

    CallbackNC_IServer_findByAlbum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        playlist ret;
        try
        {
            ret = proxy->end_findByAlbum(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findByAlbum.
 */
template<class T> Callback_IServer_findByAlbumPtr
newCallback_IServer_findByAlbum(const IceUtil::Handle<T>& instance, void (T::*cb)(const playlist&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_findByAlbum<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findByAlbum.
 */
template<class T> Callback_IServer_findByAlbumPtr
newCallback_IServer_findByAlbum(T* instance, void (T::*cb)(const playlist&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_findByAlbum<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IServer::begin_findByAlbum.
 * Create a wrapper instance by calling ::server::newCallback_IServer_findByAlbum.
 */
template<class T, typename CT>
class Callback_IServer_findByAlbum : public Callback_IServer_findByAlbum_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const playlist&, const CT&);

    Callback_IServer_findByAlbum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        playlist ret;
        try
        {
            ret = proxy->end_findByAlbum(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findByAlbum.
 */
template<class T, typename CT> Callback_IServer_findByAlbumPtr
newCallback_IServer_findByAlbum(const IceUtil::Handle<T>& instance, void (T::*cb)(const playlist&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_findByAlbum<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_findByAlbum.
 */
template<class T, typename CT> Callback_IServer_findByAlbumPtr
newCallback_IServer_findByAlbum(T* instance, void (T::*cb)(const playlist&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_findByAlbum<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IServer::begin_display.
 * Create a wrapper instance by calling ::server::newCallback_IServer_display.
 */
template<class T>
class CallbackNC_IServer_display : public Callback_IServer_display_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IServer_display(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_display.
 */
template<class T> Callback_IServer_displayPtr
newCallback_IServer_display(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_display<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_display.
 */
template<class T> Callback_IServer_displayPtr
newCallback_IServer_display(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_display<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_display.
 */
template<class T> Callback_IServer_displayPtr
newCallback_IServer_display(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_display<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_display.
 */
template<class T> Callback_IServer_displayPtr
newCallback_IServer_display(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_display<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IServer::begin_display.
 * Create a wrapper instance by calling ::server::newCallback_IServer_display.
 */
template<class T, typename CT>
class Callback_IServer_display : public Callback_IServer_display_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IServer_display(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_display.
 */
template<class T, typename CT> Callback_IServer_displayPtr
newCallback_IServer_display(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_display<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_display.
 */
template<class T, typename CT> Callback_IServer_displayPtr
newCallback_IServer_display(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_display<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_display.
 */
template<class T, typename CT> Callback_IServer_displayPtr
newCallback_IServer_display(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_display<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_display.
 */
template<class T, typename CT> Callback_IServer_displayPtr
newCallback_IServer_display(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_display<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IServer::begin_getPlaylist.
 * Create a wrapper instance by calling ::server::newCallback_IServer_getPlaylist.
 */
template<class T>
class CallbackNC_IServer_getPlaylist : public Callback_IServer_getPlaylist_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const playlist&);

    CallbackNC_IServer_getPlaylist(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        playlist ret;
        try
        {
            ret = proxy->end_getPlaylist(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_getPlaylist.
 */
template<class T> Callback_IServer_getPlaylistPtr
newCallback_IServer_getPlaylist(const IceUtil::Handle<T>& instance, void (T::*cb)(const playlist&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_getPlaylist<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_getPlaylist.
 */
template<class T> Callback_IServer_getPlaylistPtr
newCallback_IServer_getPlaylist(T* instance, void (T::*cb)(const playlist&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IServer_getPlaylist<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IServer::begin_getPlaylist.
 * Create a wrapper instance by calling ::server::newCallback_IServer_getPlaylist.
 */
template<class T, typename CT>
class Callback_IServer_getPlaylist : public Callback_IServer_getPlaylist_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const playlist&, const CT&);

    Callback_IServer_getPlaylist(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IServerPrx proxy = IServerPrx::uncheckedCast(result->getProxy());
        playlist ret;
        try
        {
            ret = proxy->end_getPlaylist(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_getPlaylist.
 */
template<class T, typename CT> Callback_IServer_getPlaylistPtr
newCallback_IServer_getPlaylist(const IceUtil::Handle<T>& instance, void (T::*cb)(const playlist&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_getPlaylist<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IServer::begin_getPlaylist.
 */
template<class T, typename CT> Callback_IServer_getPlaylistPtr
newCallback_IServer_getPlaylist(T* instance, void (T::*cb)(const playlist&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IServer_getPlaylist<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
