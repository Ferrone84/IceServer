# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.1
#
# <auto-generated>
#
# Generated from file `IServer.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module server
_M_server = Ice.openModule('server')
__name__ = 'server'

if 'Music' not in _M_server.__dict__:
    _M_server.Music = Ice.createTempClass()
    class Music(object):
        def __init__(self, id=0, name='', artist='', album='', path=''):
            self.id = id
            self.name = name
            self.artist = artist
            self.album = album
            self.path = path

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.artist)
            _h = 5 * _h + Ice.getHash(self.album)
            _h = 5 * _h + Ice.getHash(self.path)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_server.Music):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.artist is None or other.artist is None:
                    if self.artist != other.artist:
                        return (-1 if self.artist is None else 1)
                else:
                    if self.artist < other.artist:
                        return -1
                    elif self.artist > other.artist:
                        return 1
                if self.album is None or other.album is None:
                    if self.album != other.album:
                        return (-1 if self.album is None else 1)
                else:
                    if self.album < other.album:
                        return -1
                    elif self.album > other.album:
                        return 1
                if self.path is None or other.path is None:
                    if self.path != other.path:
                        return (-1 if self.path is None else 1)
                else:
                    if self.path < other.path:
                        return -1
                    elif self.path > other.path:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_server._t_Music)

        __repr__ = __str__

    _M_server._t_Music = IcePy.defineStruct('::server::Music', Music, (), (
        ('id', (), IcePy._t_int),
        ('name', (), IcePy._t_string),
        ('artist', (), IcePy._t_string),
        ('album', (), IcePy._t_string),
        ('path', (), IcePy._t_string)
    ))

    _M_server.Music = Music
    del Music

if '_t_playlist' not in _M_server.__dict__:
    _M_server._t_playlist = IcePy.defineSequence('::server::playlist', (), _M_server._t_Music)

_M_server._t_IServer = IcePy.defineValue('::server::IServer', Ice.Value, -1, (), False, True, None, ())

if 'IServerPrx' not in _M_server.__dict__:
    _M_server.IServerPrx = Ice.createTempClass()
    class IServerPrx(Ice.ObjectPrx):

        def addMusic(self, name, artist, album, context=None):
            return _M_server.IServer._op_addMusic.invoke(self, ((name, artist, album), context))

        def addMusicAsync(self, name, artist, album, context=None):
            return _M_server.IServer._op_addMusic.invokeAsync(self, ((name, artist, album), context))

        def begin_addMusic(self, name, artist, album, _response=None, _ex=None, _sent=None, context=None):
            return _M_server.IServer._op_addMusic.begin(self, ((name, artist, album), _response, _ex, _sent, context))

        def end_addMusic(self, _r):
            return _M_server.IServer._op_addMusic.end(self, _r)

        def addMusicPath(self, name, context=None):
            return _M_server.IServer._op_addMusicPath.invoke(self, ((name, ), context))

        def addMusicPathAsync(self, name, context=None):
            return _M_server.IServer._op_addMusicPath.invokeAsync(self, ((name, ), context))

        def begin_addMusicPath(self, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_server.IServer._op_addMusicPath.begin(self, ((name, ), _response, _ex, _sent, context))

        def end_addMusicPath(self, _r):
            return _M_server.IServer._op_addMusicPath.end(self, _r)

        def playMusic(self, id, context=None):
            return _M_server.IServer._op_playMusic.invoke(self, ((id, ), context))

        def playMusicAsync(self, id, context=None):
            return _M_server.IServer._op_playMusic.invokeAsync(self, ((id, ), context))

        def begin_playMusic(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_server.IServer._op_playMusic.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_playMusic(self, _r):
            return _M_server.IServer._op_playMusic.end(self, _r)

        def stopMusic(self, context=None):
            return _M_server.IServer._op_stopMusic.invoke(self, ((), context))

        def stopMusicAsync(self, context=None):
            return _M_server.IServer._op_stopMusic.invokeAsync(self, ((), context))

        def begin_stopMusic(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_server.IServer._op_stopMusic.begin(self, ((), _response, _ex, _sent, context))

        def end_stopMusic(self, _r):
            return _M_server.IServer._op_stopMusic.end(self, _r)

        def remove(self, id, context=None):
            return _M_server.IServer._op_remove.invoke(self, ((id, ), context))

        def removeAsync(self, id, context=None):
            return _M_server.IServer._op_remove.invokeAsync(self, ((id, ), context))

        def begin_remove(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_server.IServer._op_remove.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_remove(self, _r):
            return _M_server.IServer._op_remove.end(self, _r)

        def findById(self, id, context=None):
            return _M_server.IServer._op_findById.invoke(self, ((id, ), context))

        def findByIdAsync(self, id, context=None):
            return _M_server.IServer._op_findById.invokeAsync(self, ((id, ), context))

        def begin_findById(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_server.IServer._op_findById.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_findById(self, _r):
            return _M_server.IServer._op_findById.end(self, _r)

        def findByName(self, name, context=None):
            return _M_server.IServer._op_findByName.invoke(self, ((name, ), context))

        def findByNameAsync(self, name, context=None):
            return _M_server.IServer._op_findByName.invokeAsync(self, ((name, ), context))

        def begin_findByName(self, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_server.IServer._op_findByName.begin(self, ((name, ), _response, _ex, _sent, context))

        def end_findByName(self, _r):
            return _M_server.IServer._op_findByName.end(self, _r)

        def findByArtist(self, artist, context=None):
            return _M_server.IServer._op_findByArtist.invoke(self, ((artist, ), context))

        def findByArtistAsync(self, artist, context=None):
            return _M_server.IServer._op_findByArtist.invokeAsync(self, ((artist, ), context))

        def begin_findByArtist(self, artist, _response=None, _ex=None, _sent=None, context=None):
            return _M_server.IServer._op_findByArtist.begin(self, ((artist, ), _response, _ex, _sent, context))

        def end_findByArtist(self, _r):
            return _M_server.IServer._op_findByArtist.end(self, _r)

        def findByAlbum(self, album, context=None):
            return _M_server.IServer._op_findByAlbum.invoke(self, ((album, ), context))

        def findByAlbumAsync(self, album, context=None):
            return _M_server.IServer._op_findByAlbum.invokeAsync(self, ((album, ), context))

        def begin_findByAlbum(self, album, _response=None, _ex=None, _sent=None, context=None):
            return _M_server.IServer._op_findByAlbum.begin(self, ((album, ), _response, _ex, _sent, context))

        def end_findByAlbum(self, _r):
            return _M_server.IServer._op_findByAlbum.end(self, _r)

        def display(self, context=None):
            return _M_server.IServer._op_display.invoke(self, ((), context))

        def displayAsync(self, context=None):
            return _M_server.IServer._op_display.invokeAsync(self, ((), context))

        def begin_display(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_server.IServer._op_display.begin(self, ((), _response, _ex, _sent, context))

        def end_display(self, _r):
            return _M_server.IServer._op_display.end(self, _r)

        def getPlaylist(self, context=None):
            return _M_server.IServer._op_getPlaylist.invoke(self, ((), context))

        def getPlaylistAsync(self, context=None):
            return _M_server.IServer._op_getPlaylist.invokeAsync(self, ((), context))

        def begin_getPlaylist(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_server.IServer._op_getPlaylist.begin(self, ((), _response, _ex, _sent, context))

        def end_getPlaylist(self, _r):
            return _M_server.IServer._op_getPlaylist.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_server.IServerPrx.ice_checkedCast(proxy, '::server::IServer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_server.IServerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::server::IServer'
    _M_server._t_IServerPrx = IcePy.defineProxy('::server::IServer', IServerPrx)

    _M_server.IServerPrx = IServerPrx
    del IServerPrx

    _M_server.IServer = Ice.createTempClass()
    class IServer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::server::IServer')

        def ice_id(self, current=None):
            return '::server::IServer'

        @staticmethod
        def ice_staticId():
            return '::server::IServer'

        def addMusic(self, name, artist, album, current=None):
            raise NotImplementedError("servant method 'addMusic' not implemented")

        def addMusicPath(self, name, current=None):
            raise NotImplementedError("servant method 'addMusicPath' not implemented")

        def playMusic(self, id, current=None):
            raise NotImplementedError("servant method 'playMusic' not implemented")

        def stopMusic(self, current=None):
            raise NotImplementedError("servant method 'stopMusic' not implemented")

        def remove(self, id, current=None):
            raise NotImplementedError("servant method 'remove' not implemented")

        def findById(self, id, current=None):
            raise NotImplementedError("servant method 'findById' not implemented")

        def findByName(self, name, current=None):
            raise NotImplementedError("servant method 'findByName' not implemented")

        def findByArtist(self, artist, current=None):
            raise NotImplementedError("servant method 'findByArtist' not implemented")

        def findByAlbum(self, album, current=None):
            raise NotImplementedError("servant method 'findByAlbum' not implemented")

        def display(self, current=None):
            raise NotImplementedError("servant method 'display' not implemented")

        def getPlaylist(self, current=None):
            raise NotImplementedError("servant method 'getPlaylist' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_server._t_IServerDisp)

        __repr__ = __str__

    _M_server._t_IServerDisp = IcePy.defineClass('::server::IServer', IServer, (), None, ())
    IServer._ice_type = _M_server._t_IServerDisp

    IServer._op_addMusic = IcePy.Operation('addMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    IServer._op_addMusicPath = IcePy.Operation('addMusicPath', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    IServer._op_playMusic = IcePy.Operation('playMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    IServer._op_stopMusic = IcePy.Operation('stopMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    IServer._op_remove = IcePy.Operation('remove', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    IServer._op_findById = IcePy.Operation('findById', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_server._t_Music, False, 0), ())
    IServer._op_findByName = IcePy.Operation('findByName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_server._t_playlist, False, 0), ())
    IServer._op_findByArtist = IcePy.Operation('findByArtist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_server._t_playlist, False, 0), ())
    IServer._op_findByAlbum = IcePy.Operation('findByAlbum', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_server._t_playlist, False, 0), ())
    IServer._op_display = IcePy.Operation('display', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    IServer._op_getPlaylist = IcePy.Operation('getPlaylist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_server._t_playlist, False, 0), ())

    _M_server.IServer = IServer
    del IServer

# End of module server
