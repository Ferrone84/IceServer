// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `IServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package server;

public interface IServer extends com.zeroc.Ice.Object
{
    void addMusic(String name, String artist, String album, com.zeroc.Ice.Current current);

    boolean addMusicPath(String name, com.zeroc.Ice.Current current);

    void playMusic(int id, com.zeroc.Ice.Current current);

    boolean stopMusic(com.zeroc.Ice.Current current);

    boolean remove(int id, com.zeroc.Ice.Current current);

    Music findById(int id, com.zeroc.Ice.Current current);

    Music[] findByName(String name, com.zeroc.Ice.Current current);

    Music[] findByArtist(String artist, com.zeroc.Ice.Current current);

    Music[] findByAlbum(String album, com.zeroc.Ice.Current current);

    void display(com.zeroc.Ice.Current current);

    Music[] getPlaylist(com.zeroc.Ice.Current current);

    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::server::IServer"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::server::IServer";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addMusic(IServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_name;
        String iceP_artist;
        String iceP_album;
        iceP_name = istr.readString();
        iceP_artist = istr.readString();
        iceP_album = istr.readString();
        inS.endReadParams();
        obj.addMusic(iceP_name, iceP_artist, iceP_album, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addMusicPath(IServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_name;
        iceP_name = istr.readString();
        inS.endReadParams();
        boolean ret = obj.addMusicPath(iceP_name, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_playMusic(IServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_id;
        iceP_id = istr.readInt();
        inS.endReadParams();
        obj.playMusic(iceP_id, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_stopMusic(IServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.stopMusic(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_remove(IServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_id;
        iceP_id = istr.readInt();
        inS.endReadParams();
        boolean ret = obj.remove(iceP_id, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_findById(IServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_id;
        iceP_id = istr.readInt();
        inS.endReadParams();
        Music ret = obj.findById(iceP_id, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        Music.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_findByName(IServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_name;
        iceP_name = istr.readString();
        inS.endReadParams();
        Music[] ret = obj.findByName(iceP_name, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        playlistHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_findByArtist(IServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_artist;
        iceP_artist = istr.readString();
        inS.endReadParams();
        Music[] ret = obj.findByArtist(iceP_artist, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        playlistHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_findByAlbum(IServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_album;
        iceP_album = istr.readString();
        inS.endReadParams();
        Music[] ret = obj.findByAlbum(iceP_album, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        playlistHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_display(IServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.display(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getPlaylist(IServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Music[] ret = obj.getPlaylist(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        playlistHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "addMusic",
        "addMusicPath",
        "display",
        "findByAlbum",
        "findByArtist",
        "findById",
        "findByName",
        "getPlaylist",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "playMusic",
        "remove",
        "stopMusic"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_addMusic(this, in, current);
            }
            case 1:
            {
                return _iceD_addMusicPath(this, in, current);
            }
            case 2:
            {
                return _iceD_display(this, in, current);
            }
            case 3:
            {
                return _iceD_findByAlbum(this, in, current);
            }
            case 4:
            {
                return _iceD_findByArtist(this, in, current);
            }
            case 5:
            {
                return _iceD_findById(this, in, current);
            }
            case 6:
            {
                return _iceD_findByName(this, in, current);
            }
            case 7:
            {
                return _iceD_getPlaylist(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 10:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 11:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 12:
            {
                return _iceD_playMusic(this, in, current);
            }
            case 13:
            {
                return _iceD_remove(this, in, current);
            }
            case 14:
            {
                return _iceD_stopMusic(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
