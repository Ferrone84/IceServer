// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `IServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package server;

public class Music implements java.lang.Cloneable,
                              java.io.Serializable
{
    public int id;

    public String name;

    public String artist;

    public String album;

    public String path;

    public Music()
    {
        this.name = "";
        this.artist = "";
        this.album = "";
        this.path = "";
    }

    public Music(int id, String name, String artist, String album, String path)
    {
        this.id = id;
        this.name = name;
        this.artist = artist;
        this.album = album;
        this.path = path;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Music r = null;
        if(rhs instanceof Music)
        {
            r = (Music)rhs;
        }

        if(r != null)
        {
            if(this.id != r.id)
            {
                return false;
            }
            if(this.name != r.name)
            {
                if(this.name == null || r.name == null || !this.name.equals(r.name))
                {
                    return false;
                }
            }
            if(this.artist != r.artist)
            {
                if(this.artist == null || r.artist == null || !this.artist.equals(r.artist))
                {
                    return false;
                }
            }
            if(this.album != r.album)
            {
                if(this.album == null || r.album == null || !this.album.equals(r.album))
                {
                    return false;
                }
            }
            if(this.path != r.path)
            {
                if(this.path == null || r.path == null || !this.path.equals(r.path))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::server::Music");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, name);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, artist);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, album);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, path);
        return h_;
    }

    public Music clone()
    {
        Music c = null;
        try
        {
            c = (Music)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.id);
        ostr.writeString(this.name);
        ostr.writeString(this.artist);
        ostr.writeString(this.album);
        ostr.writeString(this.path);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.id = istr.readInt();
        this.name = istr.readString();
        this.artist = istr.readString();
        this.album = istr.readString();
        this.path = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Music v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Music ice_read(com.zeroc.Ice.InputStream istr)
    {
        Music v = new Music();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Music> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Music v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Music> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Music.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Music _nullMarshalValue = new Music();

    public static final long serialVersionUID = 8617827123760568977L;
}
